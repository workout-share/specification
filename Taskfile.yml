version: '3'

vars:
  SCHEMA_JSONC: schema/workout-share-schema.jsonc
  SCHEMA_JSON: schema/workout-share-schema.json

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Schema syntax validation (Type 1: Always available)
  validate-schema:
    desc: Validate that our JSON schema file is valid JSON
    cmds:
      - jq empty {{.SCHEMA_JSON}}
    silent: true

  # Workout file validation (Type 2: Requires external tool)
  validate-examples:
    desc: Validate example workout files (requires workout-share-validator)
    deps: [validate-schema]
    cmds:
      - |
        if ! command -v workout-share-validator &> /dev/null; then
          echo "❌ workout-share-validator not found"
          echo "Install with: pip install workout-share-validator"
          exit 1
        fi
      - find examples/ -name "*.yaml" -exec workout-share-validator {} --schema {{.SCHEMA_JSON}} \; > /dev/null
      - echo "✅ All examples validated"
    silent: true

  # Versioning and release tasks
  check-version:
    desc: Show next version that would be assigned
    cmds:
      - git-cliff --bumped-version
    silent: true

  preview-changelog:
    desc: Preview changelog for next version
    cmds:
      - git-cliff --bump

  prepare-release:
    desc: Prepare release by validating schema and checking version
    deps: [validate-schema]
    cmds:
      - echo "Next version:" && git-cliff --bumped-version

  release:
    desc: Create a release with changelog and git tag
    deps: [prepare-release]
    cmds:
      - git-cliff --bump -o CHANGELOG.md
      - git add CHANGELOG.md {{.SCHEMA_JSON}} VERSION
      - |
        VERSION=$(git-cliff --bumped-version)
        git commit -m "chore(release): prepare for v$VERSION"
        git tag -a "v$VERSION" -m "Release v$VERSION"
      - echo "✅ Release v$(git-cliff --bumped-version) created"
      - echo "Push with git push origin main && git push origin --tags"

  # Commit helpers
  feat:
    desc: Create a feat commit (usage - task feat -- "add new field")
    cmds:
      - |
        if [ "{{.CLI_ARGS}}" = "" ]; then
          echo "Usage: task feat -- \"description of feature\""
          exit 1
        fi
        git add -A
        git commit -m "feat: {{.CLI_ARGS}}"

  fix:
    desc: Create a fix commit (usage - task fix -- "resolve validation issue")
    cmds:
      - |
        if [ "{{.CLI_ARGS}}" = "" ]; then
          echo "Usage: task fix -- \"description of fix\""
          exit 1
        fi
        git add -A
        git commit -m "fix: {{.CLI_ARGS}}"

  docs:
    desc: Create a docs commit (usage - task docs -- "update examples")
    cmds:
      - |
        if [ "{{.CLI_ARGS}}" = "" ]; then
          echo "Usage: task docs -- \"description of documentation change\""
          exit 1
        fi
        git add -A
        git commit -m "docs: {{.CLI_ARGS}}"

  chore:
    desc: Create a chore commit (usage - task chore -- "update dependencies")
    cmds:
      - |
        if [ "{{.CLI_ARGS}}" = "" ]; then
          echo "Usage: task chore -- \"description of maintenance task\""
          exit 1
        fi
        git add -A
        git commit -m "chore: {{.CLI_ARGS}}"

  # Setup tasks
  install-hooks:
    desc: Install pre-commit hooks
    cmds:
      - pre-commit install
    silent: true

  setup:
    desc: Setup development environment
    deps: [install-hooks, validate-schema]
    cmds:
      - echo "✅ Development environment ready"
