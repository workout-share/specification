version: '3'

vars:
  SCHEMA_YAML: schema/workout-share-schema.yaml
  SCHEMA_JSON: schema/workout-share-schema.json

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Schema generation and validation
  regenerate-schema:
    desc: Convert YAML schema to JSON
    aliases: [rs]
    cmds:
      - yq eval -o=json '.' {{.SCHEMA_YAML}} > {{.SCHEMA_JSON}}
    silent: true

  validate-schema-yaml:
    desc: Validate that our YAML schema file is valid YAML
    cmds:
      - yq eval '.' {{.SCHEMA_YAML}} > /dev/null
    silent: true

  validate-schema-json:
    desc: Validate that our generated JSON schema file is valid JSON
    deps: [regenerate-schema]
    cmds:
      - jq empty {{.SCHEMA_JSON}}
    silent: true

  validate-schema:
    desc: Validate both YAML source and generated JSON schema
    aliases: [vs]
    deps: [validate-schema-yaml, validate-schema-json]
    cmds:
      - echo "Schema validation passed"

  # Check dependencies
  check-deps:
    desc: Check if required tools are installed
    aliases: [cd]
    cmds:
      - |
        echo "Checking dependencies..."
        missing=""

        if ! command -v yq &> /dev/null; then
          echo "❌ yq not found"
          missing="$missing yq"
        else
          echo "✅ yq found"
        fi

        if ! command -v jq &> /dev/null; then
          echo "❌ jq not found"
          missing="$missing jq"
        else
          echo "✅ jq found"
        fi

        if ! command -v uv &> /dev/null; then
          echo "❌ uv not found"
          missing="$missing uv"
        else
          echo "✅ uv found"
        fi

        if ! command -v pre-commit &> /dev/null; then
          echo "❌ pre-commit not found"
          missing="$missing pre-commit"
        else
          echo "✅ pre-commit found"
        fi

        if [ -n "$missing" ]; then
          echo ""
          echo "Please install missing dependencies:$missing"
          echo "  brew install yq jq uv pre-commit"
          exit 1
        fi

  # Install validation dependencies
  install-validation:
    desc: Install Python packages for validation
    deps: [check-deps]
    cmds:
      - cd code && uv sync
      - echo "✅ Validation dependencies installed"
    silent: true

  # Install pre-commit hooks
  install-hooks:
    desc: Install pre-commit hooks
    deps: [check-deps]
    cmds:
      - pre-commit install
      - pre-commit install --hook-type commit-msg
      - echo "✅ Pre-commit hooks installed"
    silent: true

  # Quick syntax validation
  validate-examples:
    desc: Quick YAML syntax validation of example workout files
    aliases: [ve]
    cmds:
      - |
        echo "Validating workout file syntax..."
        for file in examples/**/*.yaml; do
          echo "  Checking $(basename "$file")..."
          if yq eval '.' "$file" > /dev/null 2>&1; then
            echo "    ✅ Valid YAML syntax"
          else
            echo "    ❌ Invalid YAML syntax"
            exit 1
          fi
        done
        echo "All examples have valid YAML syntax!"

  # Full JSON Schema validation
  validate-examples-full:
    desc: Full JSON Schema validation of example workout files
    aliases: [vef]
    deps: [validate-schema, install-validation]
    cmds:
      - cd code && uv run validate.py ../examples

  validate-file:
    desc: Validate a specific workout file (usage - task validate-file -- path/to/file.yaml)
    aliases: [vf]
    deps: [validate-schema, install-validation]
    cmds:
      - |
        if [ "{{.CLI_ARGS}}" = "" ]; then
          echo "Usage: task validate-file -- path/to/file.yaml"
          exit 1
        fi
        cd code && uv run validate.py "../{{.CLI_ARGS}}"

  # Basic structure check
  check-workout-structure:
    desc: Basic structure check for workout files (requires program_name and workouts)
    aliases: [cws]
    cmds:
      - |
        echo "Checking basic workout file structure..."
        for file in examples/**/*.yaml; do
          echo "  Checking $(basename "$file")..."
          if yq eval '.program_name' "$file" > /dev/null 2>&1 && yq eval '.workouts' "$file" > /dev/null 2>&1; then
            echo "    ✅ Has required fields (program_name, workouts)"
          else
            echo "    ❌ Missing required fields"
            exit 1
          fi
        done
        echo "All examples have required structure!"

  # Release management with git-cliff
  preview-version:
    desc: Show what the next version would be
    aliases: [pv]
    cmds:
      - git-cliff --bumped-version

  preview-release:
    desc: Preview the changelog for the next release
    aliases: [pr]
    cmds:
      - git-cliff --bump

  release:
    desc: Create a release with changelog and git tag
    aliases: [rel]
    deps: [validate-examples-full]  # This already includes schema validation
    cmds:
      - git-cliff --bump -o CHANGELOG.md
      - git add CHANGELOG.md {{.SCHEMA_YAML}} {{.SCHEMA_JSON}} VERSION
      - |
        FULL_VERSION=$(git-cliff --bumped-version)
        VERSION=${FULL_VERSION#v}  # Strip 'v' prefix if present
        git commit -m "chore(release): prepare for v$VERSION"
        git tag -a "v$VERSION" -m "Release v$VERSION"
      - |
        FULL_VERSION=$(git-cliff --bumped-version)
        VERSION=${FULL_VERSION#v}  # Strip 'v' prefix if present
        echo "✅ Release v$VERSION created"
      - echo "Push with git push origin main and git push origin --tags"

  # Setup tasks
  setup:
    desc: Setup development environment with full validation
    aliases: [s]
    deps: [validate-schema, install-validation, install-hooks]
    cmds:
      - echo "Development environment ready"
      - echo "Schema source:" {{.SCHEMA_YAML}}
      - echo "Generated JSON:" {{.SCHEMA_JSON}}
      - echo ""
      - echo "Available commands:"
      - echo "  task validate-examples      - Quick syntax validation"
      - echo "  task validate-examples-full - Full JSON Schema validation"
      - echo "  task check-workout-structure - Basic structure checks"
