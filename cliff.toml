# Configuration file for git-cliff
# See: https://git-cliff.org/docs/configuration

[changelog]
# Changelog header
header = """
# Changelog

All notable changes to the Workout Share Schema will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""
# Template for the changelog body
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}**{{ commit.scope }}**: {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# Remove the leading and trailing whitespace from the template
trim = true
# Changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# Postprocessors to run on generated changelog
postprocessors = [
    # Update VERSION file
    { pattern = '^## \[([^\]]+)\]', replace = "", run_on = "VERSION" },
    { pattern = '.*', replace = "$1", run_on = "VERSION" },
]

[git]
# Parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# Filter out commits that are not conventional
filter_unconventional = false
# Process each line of a commit as an individual commit
split_commits = false
# Regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/workout-share/specification/issues/${2}))"},
]
# Regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->🚀 Features" },
  { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^doc", group = "<!-- 2 -->📚 Documentation" },
  { message = "^perf", group = "<!-- 3 -->⚡ Performance" },
  { message = "^refactor", group = "<!-- 4 -->🚜 Refactor" },
  { message = "^style", group = "<!-- 5 -->🎨 Styling" },
  { message = "^test", group = "<!-- 6 -->🧪 Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore|^ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 8 -->🔒 Security" },
  { message = "^revert", group = "<!-- 9 -->◀️ Revert" },
]
# Protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# Filter out the commits that are not matched by commit parsers
filter_commits = false
# Regex for matching git tags
# tag_pattern = "v[0-9].*"
# Regex for skipping tags
# skip_tags = ""
# Regex for ignoring tags
# ignore_tags = ""
# Sort the tags topologically
topo_order = false
# Sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# Limit the number of commits included in the changelog.
# limit_commits = 42
